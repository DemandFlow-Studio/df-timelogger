-- Create table to store ClickUp team members
create table public."ClickUpUsers" (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  clickup_user_id text not null,
  username text not null,
  email text null,
  is_active boolean not null default true,
  constraint ClickUpUsers_pkey primary key (id),
  constraint ClickUpUsers_clickup_user_id_unique unique (clickup_user_id)
);

-- Add RLS policies
alter table public."ClickUpUsers" enable row level security;

-- Allow authenticated users to read ClickUp users
create policy "Allow authenticated users to read ClickUp users" on public."ClickUpUsers"
  for select using (auth.role() = 'authenticated');

-- Allow authenticated users to insert ClickUp users
create policy "Allow authenticated users to insert ClickUp users" on public."ClickUpUsers"
  for insert with check (auth.role() = 'authenticated');

-- Allow authenticated users to update ClickUp users
create policy "Allow authenticated users to update ClickUp users" on public."ClickUpUsers"
  for update using (auth.role() = 'authenticated');

-- Allow authenticated users to delete ClickUp users
create policy "Allow authenticated users to delete ClickUp users" on public."ClickUpUsers"
  for delete using (auth.role() = 'authenticated');

-- Add trigger to update updated_at column
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger handle_clickup_users_updated_at
  before update on public."ClickUpUsers"
  for each row execute procedure public.handle_updated_at();

-- Insert initial data (you can modify these values)
insert into public."ClickUpUsers" (clickup_user_id, username) values
  ('82555648', 'Krishnesh KP'),
  ('176482913', 'Bullz Papu'); 